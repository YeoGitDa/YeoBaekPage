{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/chat/stream/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { GoogleGenAI } from \"@google/genai\";\n\nexport const runtime = \"nodejs\";\nconst MODEL = process.env.GEMINI_MODEL ?? \"gemini-2.5-pro\";\nconst API_KEY = process.env.GOOGLE_API_KEY!;\n\nexport async function GET(req: NextRequest) {\n  // ① 요청 파라미터 확인\n  const { searchParams } = new URL(req.url);\n  const message = searchParams.get(\"q\") ?? \"\";\n  const sid = searchParams.get(\"sid\") ?? \"anon\";\n  console.log(\"[/api/chat/stream] q=\", message, \" sid=\", sid);\n\n  if (!API_KEY) return new Response(\"missing GOOGLE_API_KEY\", { status: 500 });\n  if (!message) return new Response(\"missing q\", { status: 400 });\n\n  const genai = new GoogleGenAI({ apiKey: API_KEY });\n\n  try {\n    // ② 모델 호출 전 로그\n    console.log(\"[stream] call model:\", MODEL);\n    const streamResp = await genai.models.generateContentStream({\n      model: MODEL,\n      contents: [{ role: \"user\", parts: [{ text: message }]}],\n    });\n\n    const encoder = new TextEncoder();\n\n    return new Response(\n      new ReadableStream({\n        async start(controller) {\n          let acc = \"\";\n          try {\n            // ③ 청크 단위로 뭐가 오는지 그대로 찍어보기\n            for await (const chunk of streamResp) {\n              console.log(\"[chunk raw]:\", chunk); // 구조 확인용\n              const text: string | undefined = chunk.text;\n              console.log(\"[chunk text]:\", text);\n\n              if (text) {\n                acc += text;\n                controller.enqueue(\n                  encoder.encode(`data: ${JSON.stringify({ text })}\\n\\n`)\n                );\n              }\n            }\n            console.log(\"[stream end] final acc:\", acc);\n            controller.close();\n          } catch (err) {\n            console.error(\"[stream loop error]\", err);\n            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ text: \"⚠️ stream error\" })}\\n\\n`));\n            controller.close();\n          }\n        },\n      }),\n      {\n        headers: {\n          \"Content-Type\": \"text/event-stream\",\n          \"Cache-Control\": \"no-cache\",\n          Connection: \"keep-alive\",\n        },\n      }\n    );\n  } catch (e) {\n    console.error(\"[/api/chat/stream] error:\", e);\n    return new Response(\"internal error\", { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM,UAAU;AACvB,MAAM,QAAQ,QAAQ,GAAG,CAAC,YAAY,IAAI;AAC1C,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc;AAEnC,eAAe,IAAI,GAAgB;IACxC,eAAe;IACf,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,UAAU,aAAa,GAAG,CAAC,QAAQ;IACzC,MAAM,MAAM,aAAa,GAAG,CAAC,UAAU;IACvC,QAAQ,GAAG,CAAC,yBAAyB,SAAS,SAAS;IAEvD,IAAI,CAAC,SAAS,OAAO,IAAI,SAAS,0BAA0B;QAAE,QAAQ;IAAI;IAC1E,IAAI,CAAC,SAAS,OAAO,IAAI,SAAS,aAAa;QAAE,QAAQ;IAAI;IAE7D,MAAM,QAAQ,IAAI,6JAAA,CAAA,cAAW,CAAC;QAAE,QAAQ;IAAQ;IAEhD,IAAI;QACF,eAAe;QACf,QAAQ,GAAG,CAAC,wBAAwB;QACpC,MAAM,aAAa,MAAM,MAAM,MAAM,CAAC,qBAAqB,CAAC;YAC1D,OAAO;YACP,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,OAAO;wBAAC;4BAAE,MAAM;wBAAQ;qBAAE;gBAAA;aAAE;QACzD;QAEA,MAAM,UAAU,IAAI;QAEpB,OAAO,IAAI,SACT,IAAI,eAAe;YACjB,MAAM,OAAM,UAAU;gBACpB,IAAI,MAAM;gBACV,IAAI;oBACF,2BAA2B;oBAC3B,WAAW,MAAM,SAAS,WAAY;wBACpC,QAAQ,GAAG,CAAC,gBAAgB,QAAQ,SAAS;wBAC7C,MAAM,OAA2B,MAAM,IAAI;wBAC3C,QAAQ,GAAG,CAAC,iBAAiB;wBAE7B,IAAI,MAAM;4BACR,OAAO;4BACP,WAAW,OAAO,CAChB,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;gCAAE;4BAAK,GAAG,IAAI,CAAC;wBAE1D;oBACF;oBACA,QAAQ,GAAG,CAAC,2BAA2B;oBACvC,WAAW,KAAK;gBAClB,EAAE,OAAO,KAAK;oBACZ,QAAQ,KAAK,CAAC,uBAAuB;oBACrC,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;wBAAE,MAAM;oBAAkB,GAAG,IAAI,CAAC;oBAC5F,WAAW,KAAK;gBAClB;YACF;QACF,IACA;YACE,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,YAAY;YACd;QACF;IAEJ,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,IAAI,SAAS,kBAAkB;YAAE,QAAQ;QAAI;IACtD;AACF","debugId":null}}]
}